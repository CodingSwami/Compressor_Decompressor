package CompressProject.GUI;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingConstants;

import CompressProject.Comp_Decomp.compressor;
import CompressProject.Comp_Decomp.decompressor;

import javax.swing.JButton;
import javax.swing.JFileChooser;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;

public class AppFrame extends JFrame implements ActionListener {

    JButton compressBtn;
    JButton decompressBtn;

    AppFrame() {
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        this.setLayout(null);

        JLabel label = new JLabel();
        label.setText("Compressor <<<--->>> Decompressor");

        JPanel panel = new JPanel();
        panel.add(label);
        panel.setBackground(Color.cyan);
        panel.setBounds(20, 20, 460, 20); // set the position and size of the panel
        this.add(panel); // add the panel to the window

        JLabel bottomLabel = new JLabel("Â© 2023 Gaurav Goswami. All rights reserved.");
        bottomLabel.setHorizontalAlignment(SwingConstants.CENTER);
        bottomLabel.setBounds(0, 195, 500, 20);

        // Add the bottom label to the window
        this.add(bottomLabel);

        compressBtn = new JButton("Select File to Compress");
        compressBtn.setBounds(30, 100, 200, 30);

        decompressBtn = new JButton("Select File to decompress");
        decompressBtn.setBounds(250, 100, 200, 30);

        this.add(compressBtn);
        this.add(decompressBtn);
        this.setSize(1000, 100);
        this.getContentPane().setBackground(Color.GREEN);
        this.setVisible(true);
    }

    @Override
    /*
     * This is the implementation of the actionPerformed() method from the
     * ActionListener interface.
     * This method is called whenever an action event (such as a button click)
     * occurs.
     */
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == compressBtn) {
            /*
             * This checks whether the action event was generated by the compressButton.
             * If so, it proceeds to the next block of code.
             */
            /*
             * A new JFileChooser object is created,
             * and its showSaveDialog() method is called to display a "Save" dialog box for
             * the user
             * to select a file to compress.
             * The method returns an integer value that represents the user's response, such
             * as whether they clicked "Save" or "Cancel".
             */
            JFileChooser fileChooser = new JFileChooser();
            int response = fileChooser.showSaveDialog(null);

            if (response == JFileChooser.APPROVE_OPTION) {
                /*
                 * This block of code is executed if the user clicked the "Save" button in the
                 * file dialog box.
                 */
                File file = new File(fileChooser.getSelectedFile().getAbsolutePath());
                /*
                 * This retrieves the selected file's path using getSelectedFile() method and
                 * creates a new File object from it.
                 * The File object represents the file that will be compressed.
                 */
                System.out.println(file);// This prints the file path to the console.
                try {
                    compressor.method(file);

                } catch (Exception excp) {
                    JOptionPane.showMessageDialog(null, excp.toString());
                }
            }
        }

        if (e.getSource() == decompressBtn) {
            JFileChooser fileChooser = new JFileChooser();
            int response = fileChooser.showSaveDialog(null);

            if (response == JFileChooser.APPROVE_OPTION) {

                File file = new File(fileChooser.getSelectedFile().getAbsolutePath());
                System.out.println(file);
                try {
                    decompressor.method(file);
                } catch (Exception excp) {
                    JOptionPane.showMessageDialog(null, excp.toString());
                }
            }
        }
    }
}
